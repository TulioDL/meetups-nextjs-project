import { MongoClient, ObjectId } from "mongodb"; //ObjectId will allow us to convert the id string into an object mongodb understands
import Head from "next/head";
import { Fragment } from "react";

import MeetupDetail from "../../components/meetups/MeetupDetail";

const MeetupDetailsPage = (props) => {
    return (
        <Fragment>
            <Head>
                <title>{props.meetupData.title}</title>
                <meta
                    name="description"
                    content={props.meetupData.desciption}
                />
            </Head>
            <MeetupDetail
                image={props.meetupData.image}
                title={props.meetupData.title}
                address={props.meetupData.address}
                description={props.meetupData.desciption}
            />
        </Fragment>
    );
};

export const getStaticPaths = async () => {
    //If your are using getStaticProps (and only with this) IN a dynamic page, you have to use this function too
    //here we set every path that will be allowed in the dynamic route, of course this can be generated by fetching data, and
    //configures it dynamically

    const client = await MongoClient.connect(
        "mongodb+srv://tuliodl:18549750@cluster0.qaco1.mongodb.net/meetups?retryWrites=true&w=majority"
    );

    const db = client.db();

    const meetupsCollection = db.collection("meetups");

    const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray(); //(no filter parameters, find all _id)

    client.close();

    return {
        fallback: false, //by setting fallback to false, we are telling that all the params in the array are supported, not just some of them,
        // and doesnt need NextJS to dynamically generates new ones
        paths: meetups.map((meetup) => ({
            params: { meetupId: meetup._id.toString() },
        })), //creating the paths dynamically

        // [
        //     {
        //         params: {
        //             meetupId: "m1",
        //         },
        //     }, .....
        // ],
    };
};

export const getStaticProps = async (context) => {
    //fetch data from a single meetup

    const meetupId = context.params.meetupId; //context in this function will not return res and req, instead it will give other info

    const client = await MongoClient.connect(
        "mongodb+srv://tuliodl:18549750@cluster0.qaco1.mongodb.net/meetups?retryWrites=true&w=majority"
    );

    const db = client.db();

    const meetupsCollection = db.collection("meetups");

    const selectedMeetup = await meetupsCollection.findOne({
        _id: ObjectId(meetupId),
    }); //(no filter parameters, find all _id)

    console.log(selectedMeetup);

    client.close();

    return {
        props: {
            meetupData: {
                image: selectedMeetup.image,
                id: selectedMeetup._id.toString(),
                title: selectedMeetup.title,
                address: selectedMeetup.address,
                description: selectedMeetup.description,
            },
        },
    };
};

export default MeetupDetailsPage;